<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Application\{{modelName}}\Delete{{modelName}}\Delete{{modelName}};
use App\Application\{{modelName}}\Get{{modelName}}List\Get{{modelName}}List;
use App\Application\{{modelName}}\Store{{modelName}}\Store{{modelName}};
use App\Application\{{modelName}}\Update{{modelName}}\Update{{modelName}};
use App\Http\Requests\{{modelName}}\List{{modelName}}Request;
use App\Http\Requests\{{modelName}}\Store{{modelName}}Request;
use App\Http\Requests\{{modelName}}\Update{{modelName}}Request;
use App\Http\Resources\{{modelName}}\{{modelName}}Resource;
use App\Http\Resources\{{modelName}}\{{modelName}}ResourceCollection;
use App\Domain\{{modelName}}\{{modelName}};
use App\Domain\{{modelName}}\{{modelName}}Filter;
use App\Infrastructure\Core\Pagination;
use App\Infrastructure\Core\Sorting;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Response;

class {{modelName}}Controller extends Controller
{
    public function index(List{{modelName}}Request $request): JsonResponse
    {
        $order = Sorting::fromRequest($request, {{modelName}}::ALLOWED_SORT_FIELDS);
        $pagination = Pagination::fromRequest($request);
        $filter = {{modelName}}Filter::fromRequest($request);

        ${{modelNamePluralLowerCase}} = $this->dispatch(new Get{{modelName}}List($filter, $pagination, $order));

        return new JsonResponse(
            new {{modelName}}ResourceCollection(${{modelNamePluralLowerCase}})
        );
    }

    public function store(Store{{modelName}}Request $request): JsonResponse
    {
        ${{modelNameSingularLowerCaseFirst}} = $this->dispatch(Store{{modelName}}::fromRequest($request));

        return new JsonResponse([
            'data' => new {{modelName}}Resource(${{modelNameSingularLowerCaseFirst}})
        ], Response::HTTP_CREATED);
    }

    public function update(Update{{modelName}}Request $request, {{modelName}} ${{modelNameSingularLowerCaseFirst}}): JsonResponse
    {
        ${{modelNameSingularLowerCaseFirst}} = $this->dispatch(Update{{modelName}}::fromRequest($request, ${{modelNameSingularLowerCaseFirst}}));

        return new JsonResponse([
            'data' => new {{modelName}}Resource(${{modelNameSingularLowerCaseFirst}})
        ]);
    }

    public function show({{modelName}} ${{modelNameSingularLowerCaseFirst}}): JsonResponse
    {
        return new JsonResponse([
            'data' => new {{modelName}}Resource(${{modelNameSingularLowerCaseFirst}})
        ]);
    }

    public function destroy({{modelName}} ${{modelNameSingularLowerCaseFirst}}): JsonResponse
    {
        $this->dispatch(new Delete{{modelName}}(${{modelNameSingularLowerCaseFirst}}));

        return new JsonResponse(null, Response::HTTP_NO_CONTENT);
    }
}
